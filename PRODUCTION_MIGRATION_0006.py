# Migration replacement for production deployment
# This file should replace the problematic migration in production

# Generated by Django 5.1 on 2025-10-04 04:17

from django.db import migrations, models


def create_fields_if_not_exist(apps, schema_editor):
    """
    Safely create Order fields if they don't already exist.
    This prevents the "column already exists" error in production.
    """
    
    with schema_editor.connection.cursor() as cursor:
        
        # List of fields to add with their SQL definitions
        fields = [
            ('tracking_code', 'VARCHAR(100) NULL'),
            ('note', 'TEXT NULL'), 
            ('updated_at', 'TIMESTAMPTZ DEFAULT NOW()')
        ]
        
        for field_name, field_definition in fields:
            try:
                # Try to select from the field to see if it exists
                cursor.execute(f"SELECT {field_name} FROM core_order LIMIT 1;")
                # If successful, field exists - skip it
                pass
                
            except Exception:
                # Field doesn't exist, create it
                try:
                    cursor.execute(f"ALTER TABLE core_order ADD COLUMN {field_name} {field_definition};")
                except Exception as e:
                    # If it fails, maybe field exists but was created differently
                    # Just continue - this is a safety net
                    pass


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_sitesettings'),
    ]

    operations = [
        # Change model options (this is always safe)
        migrations.AlterModelOptions(
            name='order',
            options={'ordering': ['-created_at'], 'verbose_name': 'سفارش', 'verbose_name_plural': 'سفارشات'},
        ),
        
        # Safely add fields using raw SQL
        migrations.RunPython(
            create_fields_if_not_exist, 
            migrations.RunPython.noop  # No reverse operation needed
        ),
    ]